from telegram import Update
from telegram.ext import (ApplicationBuilder, CallbackQueryHandler,
                          ContextTypes, CommandHandler, MessageHandler, filters)

from gpt import ChatGptService
from util import (load_message, send_text, send_image, show_main_menu,
                  load_prompt, send_text_buttons, Dialog, send_html)

import credentials
import logging

logging.basicConfig(level=logging.INFO)

dialog = Dialog()
dialog.mode = "default"

dialog.score = 0


def reset_quiz():
    dialog.score = 0


topic_prompts = {
    "quiz_prog_btn": "quiz_python",
    "quiz_math_btn": "quiz_math",
    "quiz_biology_btn": "quiz_biology",
}


character_prompts = {
    "cobain_btn": "talk_cobain",
    "hawking_btn": "talk_hawking",
    "nietzsche_btn": "talk_nietzsche",
    "queen_btn": "talk_queen",
    "tolkien_btn": "talk_tolkien"
}


languages = {
    "english": "–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞",
    "ukrainian": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    "french": "–§—Ä–∞–Ω—Ü—É–∑—å–∫–∞",
    "german": "–ù—ñ–º–µ—Ü—å–∫–∞",
    "spanish": "–Ü—Å–ø–∞–Ω—Å—å–∫–∞",
}


content_quiz = ""
result_quiz = ""

translate_language = ""

text_education = ""
text_experience = ""
text_skills = ""


async def handle_condition_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if dialog.mode == "gpt":
        await handle_message_chat_gpt(update, context)
    elif dialog.mode in character_prompts:
        await handle_message_talk(update, context)
    elif dialog.mode in topic_prompts:
        await handle_quiz_answer(update, context)
    elif dialog.mode in languages:
        await handle_text_for_translation(update, context)
    elif dialog.mode == "resume_education":
        await handle_resume_education(update, context)
    elif dialog.mode == "resume_experience":
        await handle_resume_experience(update, context)
    elif dialog.mode == "resume_skills":
        await handle_resume_skills(update, context)
    elif dialog.mode == "parrot":
        await parrot_condition(update, context)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–§—É–Ω–∫—Ü—ñ—è start –≤–∏–∫–ª–∏–∫–∞–Ω–∞")
    dialog.mode = "default"
    text = load_message("main")
    await send_image(update, context, "main")
    await send_html(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
        'random': '–î—ñ–∑–Ω–∞—Ç–∏—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é üë§',
        'quiz': '–í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É –∫–≤—ñ–∑—ñ ‚ùì',
        'translate': '–ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç üîÑ',
        'resume_assistance': '–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑—é–º–µ üìÑ',
        'parrot': '–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ü¶ú'
    })


async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–§—É–Ω–∫—Ü—ñ—è random –≤–∏–∫–ª–∏–∫–∞–Ω–∞")
    dialog.mode = "random"
    text = load_message("random")
    await send_image(update, context, "random")
    await send_text(update, context, text)
    prompt = load_prompt("random")
    content = await chat_gpt.send_question(prompt, "–î–∞–π —Ü—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç")
    await send_text_buttons(update, context, content, {
        "more_btn": "–•–æ—á—É —â–µ —Ñ–∞–∫—Ç",
        "back_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
    })


async def handle_button_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback: {query.data}")

    await query.answer()

    if query.data == "more_btn":
        await random(update, context)
    elif query.data == "back_btn":
        await start(update, context)
    else:
        logging.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π callback: {query.data}")


async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–§—É–Ω–∫—Ü—ñ—è gpt –≤–∏–∫–ª–∏–∫–∞–Ω–∞")
    dialog.mode = "gpt"
    text = load_message("gpt")
    await send_image(update, context, "gpt")
    await send_text(update, context, text)
    prompt = load_prompt("gpt")
    chat_gpt.set_prompt(prompt)


async def handle_message_chat_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {text}")

    await chat_gpt.add_message(text)
    logging.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ chat_gpt")

    answer = await chat_gpt.send_message_list()
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ chat_gpt: {answer}")

    await send_text(update, context, answer)
    logging.info("–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")


async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–§—É–Ω–∫—Ü—ñ—è talk –≤–∏–∫–ª–∏–∫–∞–Ω–∞")
    dialog.mode = "talk"
    text = load_message("talk")
    await send_image(update, context, "talk")
    await send_text_buttons(update, context, text, {
        "cobain_btn": "–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω",
        "hawking_btn": "–°—Ç—ñ–≤–µ–Ω –ì–æ–∫—ñ–Ω–≥",
        "nietzsche_btn": "–§—Ä—ñ–¥—Ä—ñ—Ö –ù—ñ—Ü—à–µ",
        "queen_btn": "–Ñ–ª–∏–∑–∞–≤–µ—Ç–∞ II",
        "tolkien_btn": "–î–∂–æ–Ω –¢–æ–ª–∫—ñ–Ω",
        "end_btn_talk": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
    })


async def handle_talk_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback: {query.data}")
    await query.answer()

    if query.data == "end_btn_talk":
        await start(update, context)
        return
    elif query.data in character_prompts:
        character_name = {
            "cobain_btn": "–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω",
            "hawking_btn": "–°—Ç—ñ–≤–µ–Ω –ì–æ–∫—ñ–Ω–≥",
            "nietzsche_btn": "–§—Ä—ñ–¥—Ä—ñ—Ö –ù—ñ—Ü—à–µ",
            "queen_btn": "–Ñ–ª–∏–∑–∞–≤–µ—Ç–∞ II",
            "tolkien_btn": "–î–∂–æ–Ω –¢–æ–ª–∫—ñ–Ω"
        }[query.data]

        prompt = load_prompt(character_prompts[query.data])
        chat_gpt.set_prompt(prompt)
        dialog.mode = query.data
        await send_text(update, context, f"–ü—Ä–∏–≤—ñ—Ç, —è {character_name}. –î–∞–≤–∞–π –ø–æ—Å–ø—ñ–ª–∫—É—î–º–æ—Å—è!")
    else:
        logging.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π callback: {query.data}")


async def handle_message_talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {text}")

    await chat_gpt.add_message(text)
    logging.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ chat_gpt")

    answer = await chat_gpt.send_message_list()
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ chat_gpt: {answer}")

    await send_text_buttons(update, context, answer, {"end_btn_talk": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"})
    logging.info("–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")


async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–§—É–Ω–∫—Ü—ñ—è quiz –≤–∏–∫–ª–∏–∫–∞–Ω–∞")
    dialog.mode = "quiz"
    reset_quiz()
    text = load_message("quiz")
    await send_image(update, context, "quiz")
    await send_text_buttons(update, context, text, {
        "quiz_prog_btn": "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –º–æ–≤–æ—é Python",
        "quiz_math_btn": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "quiz_biology_btn": "–ë—ñ–æ–ª–æ–≥—ñ—è",
        "end_btn_quiz": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –∫–≤—ñ–∑"
    })


async def handle_quiz_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback: {query.data}")
    await query.answer()

    if query.data == "end_btn_quiz":
        await start(update, context)
        return

    if query.data in topic_prompts:
        global content_quiz
        dialog.mode = query.data
        prompt = load_prompt(topic_prompts[query.data])
        chat_gpt.set_prompt(prompt)
        content_quiz = await chat_gpt.send_question(prompt, "–î–∞–π –ø–∏—Ç–∞–Ω–Ω—è –∫–≤—ñ–∑—É, –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ —Å–ª–æ–≤–µ—Å–Ω–æ—é, –±–µ–∑ —á–∏—Å–µ–ª.")
        await send_text(update, context, f"{content_quiz}\n\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è:")
    else:
        logging.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π callback: {query.data}")


async def handle_quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {text}")

    global content_quiz
    global result_quiz
    await chat_gpt.add_message(f"–ü–∏—Ç–∞–Ω–Ω—è —Ç–∞–∫–µ: {content_quiz}\n –ú–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞–∫–∞: {text.capitalize()}.\n –Ø–∫—â–æ –º–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∞–±–æ –±–ª–∏–∑—å–∫–∞ –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è, —Ç–æ –¥–∞–π –Ω–∞–ø–∏—à–∏: 'true', —ñ–Ω–∞–∫—à–µ: –Ω–∞–ø–∏—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.\n –î–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º —É —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ, —è–∫—â–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: 'true' –∞–±–æ —è–∫—â–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: '–ø—Ä–∞–≤–∏–¥—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å'.")
    logging.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ chat_gpt")

    result_quiz = await chat_gpt.send_message_list()
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ chat_gpt: {result_quiz}")

    if "true" in result_quiz.lower():
        dialog.score += 1
        await send_text(update, context, "–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å - –ø—Ä–∞–≤–∏–ª—å–Ω–∞. –í–∞–º +1 –±–∞–ª")
    else:
        await send_text(update, context, f"–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {result_quiz}")

    await send_text_buttons(update, context, f"\n\n–ü–æ—Ç–æ—á–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {dialog.score}", {
        "quiz_more_btn": "–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è",
        "quiz_change_btn": "–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É",
        "end_btn_quiz": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –∫–≤—ñ–∑"
    })
    logging.info("–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")


async def handle_quiz_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback: {query.data}")
    await query.answer()

    global result_quiz
    global content_quiz
    if query.data == "quiz_more_btn":
        result_quiz = ""
        content_quiz = ""
        prompt = load_prompt(topic_prompts[dialog.mode])
        content_quiz = await chat_gpt.send_question(prompt, "–î–∞–π –ø–∏—Ç–∞–Ω–Ω—è –∫–≤—ñ–∑—É, –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ —Å–ª–æ–≤–µ—Å–Ω–æ—é, –±–µ–∑ —á–∏—Å–µ–ª.")
        await send_text(update, context, f"{content_quiz}\n\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è:")

    elif query.data == "quiz_change_btn":
        await send_text(update, context, "–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É —Ç–µ–º—É:")
        text = load_message("quiz")
        await send_text_buttons(update, context, text, {
            "quiz_prog_btn": "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –º–æ–≤–æ—é Python",
            "quiz_math_btn": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "quiz_biology_btn": "–ë—ñ–æ–ª–æ–≥—ñ—è",
            "end_btn_quiz": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –∫–≤—ñ–∑"
        })
    elif query.data == "end_btn_quiz":
        await send_text(update, context, f"–î—è–∫—É—é –∑–∞ —É—á–∞—Å—Ç—å! –í–∞—à —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {dialog.score}")
        await start(update, context)


async def translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–§—É–Ω–∫—Ü—ñ—è translation –≤–∏–∫–ª–∏–∫–∞–Ω–∞")
    dialog.mode = "translation"
    text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É, –Ω–∞ —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç."
    await send_text_buttons(update, context, text, {
        "english": "–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞",
        "ukrainian": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        "french": "–§—Ä–∞–Ω—Ü—É–∑—å–∫–∞",
        "german": "–ù—ñ–º–µ—Ü—å–∫–∞",
        "spanish": "–Ü—Å–ø–∞–Ω—Å—å–∫–∞",
        "end_btn_translation": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
    })


async def handle_language_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback: {query.data}")
    await query.answer()

    if query.data == "end_btn_translation":
        await start(update, context)
        return

    if query.data in languages:
        global translate_language
        translate_language = languages[query.data]
        dialog.mode = query.data
        text = f"–í–∏ –æ–±—Ä–∞–ª–∏ {translate_language}.–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏."
        await send_text(update, context, text)
        logging.info("–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
    else:
        logging.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π callback: {query.data}")


async def handle_text_for_translation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    global translate_language

    text_to_translate = update.message.text
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {text_to_translate}")

    await chat_gpt.add_message(f"–ü–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: {text_to_translate} –Ω–∞ {translate_language} –º–æ–≤—É")
    logging.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ chat_gpt")

    translated_text = await chat_gpt.send_message_list()
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ chat_gpt: {translated_text}")

    await send_text_buttons(update, context, f"–ü–µ—Ä–µ–∫–ª–∞–¥:\n{translated_text}", {
        "change_language_btn": "–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É",
        "end_btn_translation": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
    })
    logging.info("–ü–µ—Ä–µ–∫–ª–∞–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")


async def handle_translation_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback: {query.data}")
    await query.answer()

    if query.data == "change_language_btn":
        await translate(update, context)
    elif query.data == "end_btn_translation":
        await start(update, context)


async def resume_assistance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–§—É–Ω–∫—Ü—ñ—è resume_assistance –≤–∏–∫–ª–∏–∫–∞–Ω–∞")
    dialog.mode = "resume"
    text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è —Ä–µ–∑—é–º–µ."
    await send_text_buttons(update, context, text, {
        "resume_start_btn": "–ü–æ—á–∞—Ç–∏",
        "resume_finished_btn": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
    })


async def handle_resume_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback: {query.data}")
    await query.answer()

    if query.data == "resume_finished_btn":
        await start(update, context)

    if query.data == "resume_start_btn":
        await send_text(update, context, "–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É –æ—Å–≤—ñ—Ç—É:")
        logging.info("–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
        dialog.mode = "resume_education"
    else:
        logging.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π callback: {query.data}")


async def handle_resume_education(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global text_education
    text_education = update.message.text
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {text_education}")
    await send_text(update, context, "–û–ø–∏—à—ñ—Ç—å –≤–∞—à –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏:")
    dialog.mode = "resume_experience"


async def handle_resume_experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global text_experience
    text_experience = update.message.text
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {text_experience}")
    await send_text(update, context, "–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ –Ω–∞–≤–∏—á–∫–∏:")
    dialog.mode = "resume_skills"


async def handle_resume_skills(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global text_skills
    text_skills = update.message.text
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {text_skills}")
    await create_resume_gpt(update, context)


async def create_resume_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global text_education
    global text_experience
    global text_skills

    await chat_gpt.add_message(f"–°—Ç–≤–æ—Ä–∏ —Ü—ñ–∫–∞–≤–µ —Ä–µ–∑—é–º–µ.\n –í —Ç–µ–±–µ —î —Ç–∞–∫—ñ –¥–∞–Ω—ñ:\n –û—Å–≤—ñ—Ç–∞:{text_education}\n –î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏:{text_experience}\n –ù–∞–≤–∏—á–∫–∏:{text_skills}")
    logging.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ chat_gpt")

    resume_text = await chat_gpt.send_message_list()
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ chat_gpt: {resume_text}")

    await send_text_buttons(update, context, f"–í–∞—à–µ —Ä–µ–∑—é–º–µ:\n {resume_text}", {
        "resume_edit": "–ü–µ—Ä–µ—Ä–æ–±–∏—Ç–∏ —Ä–µ–∑—é–º–µ",
        "end_btn_resume": "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏"
    })
    logging.info("–†–µ–∑—é–º–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")


async def handle_resume_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback: {query.data}")
    await query.answer()

    if query.data == "resume_edit":
        await resume_assistance(update, context)
    elif query.data == "end_btn_resume":
        await send_text(update, context, "–í–∞—à–µ —Ä–µ–∑—é–º–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –î—è–∫—É—î–º–æ!")
        await start(update, context)


async def parrot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –§—É–Ω–∫—Ü—ñ—è, —è–∫ —ñ –ø–∞–ø—É–≥–∞–π –ø–æ–≤—Ç–æ—Ä—é—î –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º, –ø–æ–∫–∏ –≤—ñ–Ω –Ω–µ –≤–∏–π–¥–µ —ñ–∑ —Å—Ç–∞–Ω—É –ø–∞–ø—É–≥–∏
    """
    print("–§—É–Ω–∫—Ü—ñ—è parrot –≤–∏–∫–ª–∏–∫–∞–Ω–∞")
    dialog.mode = "parrot"
    text = "–í–∏ –≤—ñ–π—à–ª–∏ –≤ —Å—Ç–∞–Ω –ø–∞–ø—É–≥–∏ ü¶ú. –¶—è —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫ —ñ –ø–∞–ø—É–≥–∞–π –±—É–¥–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –∑–∞ –≤–∞–º–∏, –ø–æ–∫–∏ –≤–∏ –Ω–µ –≤–∏–π–¥–µ—Ç–µ —ñ–∑ —Å—Ç–∞–Ω—É –ø–∞–ø—É–≥–∏."
    await send_text_buttons(update, context, text, {
        "finish_condition_parrot": "–í–∏–π—Ç–∏ —ñ–∑ —Å—Ç–∞–Ω—É –ø–∞–ø—É–≥–∏ ‚ùåü¶ú"
    })


async def parrot_condition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {text}")

    await send_text_buttons(update, context, f"ü¶úüîä: {text}", {
        "finish_condition_parrot": "–í–∏–π—Ç–∏ —ñ–∑ —Å—Ç–∞–Ω—É –ø–∞–ø—É–≥–∏ ‚ùåü¶ú"
    })
    logging.info("–ü–∞–ø—É–≥–∞ –ø–æ–≤—Ç–æ—Ä–∏–≤")


async def handle_btn_parrot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback: {query.data}")
    await query.answer()

    if query.data == "finish_condition_parrot":
        await send_text(update, context, "–í–∏ –≤–∏–π—à–ª–∏ —ñ–∑ —Å—Ç–∞–Ω—É –ø–∞–ø—É–≥–∏ ‚ùåü¶ú")
        await start(update, context)
    else:
        logging.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π callback: {query.data}")


chat_gpt = ChatGptService(credentials.ChatGPT_TOKEN)
app = ApplicationBuilder().token(credentials.BOT_TOKEN).build()


app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("talk", talk))
app.add_handler(CommandHandler("quiz", quiz))
app.add_handler(CommandHandler("translate", translate))
app.add_handler(CommandHandler("resume_assistance", resume_assistance))
app.add_handler(CommandHandler("parrot", parrot))

app.add_handler(CallbackQueryHandler(handle_button_random, pattern="^(more_btn|back_btn)$"))

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_condition_dialog))

app.add_handler(CallbackQueryHandler(
    handle_talk_choice,
    pattern="^(cobain_btn|hawking_btn|nietzsche_btn|queen_btn|tolkien_btn|end_btn_talk)$"))

app.add_handler(CallbackQueryHandler(handle_quiz_navigation, pattern='^(quiz_more_btn|quiz_change_btn|end_btn_quiz)$'))
app.add_handler(CallbackQueryHandler(handle_quiz_choice, pattern='^quiz_.*'))

app.add_handler(CallbackQueryHandler(handle_translation_navigation,
                                     pattern='^(change_language_btn|end_btn_translation)$'))
app.add_handler(CallbackQueryHandler(handle_language_choice,
                                     pattern='^(english|ukrainian|french|german|spanish|end_btn_translation)$'))

app.add_handler(CallbackQueryHandler(handle_resume_navigation, pattern="^(resume_edit|end_btn_resume)$"))
app.add_handler(CallbackQueryHandler(handle_resume_button, pattern="^(resume_start_btn|resume_finished_btn)$"))

app.add_handler(CallbackQueryHandler(handle_btn_parrot, pattern="^finish_condition_parrot$"))

app.run_polling()
